{"ast":null,"code":"export const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000';\nexport const fetchPatient = async id => {\n  console.log('Fetching patient with ID:', id); // Debug log\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/patients/${id}`);\n    console.log('Patient API response status:', response.status); // Debug response\n\n    if (!response.ok) {\n      console.error('Failed to fetch patient:', response.statusText);\n      throw new Error(`Failed to fetch patient: ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log('Patient data received:', data); // Debug data\n    return data;\n  } catch (error) {\n    console.error('API call error:', error);\n    throw error;\n  }\n};\nexport const fetchPatientSessions = async patientId => {\n  console.log('Fetching sessions for patient:', patientId); // Debug log\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/sessions/patient/${patientId}`);\n    console.log('Sessions API response status:', response.status); // Debug response\n\n    if (!response.ok) {\n      console.error('Failed to fetch sessions:', response.statusText);\n      throw new Error(`Failed to fetch sessions: ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log('Sessions data received:', data); // Debug data\n    return data;\n  } catch (error) {\n    console.error('API call error:', error);\n    throw error;\n  }\n};\nexport const fetchPrescriptions = async patientId => {\n  const response = await fetch(`${API_BASE_URL}/api/prescriptions/patient/${patientId}`);\n  if (!response.ok) throw new Error('Failed to fetch prescriptions');\n  return response.json();\n};\nexport const fetchExercises = async () => {\n  const response = await fetch(`${API_BASE_URL}/api/exercises`);\n  if (!response.ok) throw new Error('Failed to fetch exercises');\n  return response.json();\n};\nexport const fetchSessionMetrics = async sessionId => {\n  const response = await fetch(`${API_BASE_URL}/api/sessions/${sessionId}/metrics`);\n  if (!response.ok) throw new Error('Failed to fetch session metrics');\n  return response.json();\n};\nexport const fetchOngoingPatients = async () => {\n  try {\n    var _sessions$, _patients$;\n    // Fetch sessions\n    console.log(\"Hello I am Fetching sessions from API...\");\n    const sessionsResponse = await fetch(`${API_BASE_URL}/api/allsessions`);\n    if (!sessionsResponse.ok) {\n      throw new Error(`Failed to fetch sessions: ${sessionsResponse.statusText}`);\n    }\n    const sessions = await sessionsResponse.json();\n    console.log('Successfully fetched sessions from API:', {\n      count: sessions.length,\n      firstSession: (_sessions$ = sessions[0]) === null || _sessions$ === void 0 ? void 0 : _sessions$.id\n    });\n\n    // Fetch patients first\n    console.log(\"Hello I am Fetching patients from API...\");\n    const patientsResponse = await fetch(`${API_BASE_URL}/api/patients`);\n    if (!patientsResponse.ok) {\n      throw new Error(`Failed to fetch patients: ${patientsResponse.statusText}`);\n    }\n    const patients = await patientsResponse.json();\n    console.log('Successfully fetched patients from API:', {\n      count: patients.length,\n      firstPatient: (_patients$ = patients[0]) === null || _patients$ === void 0 ? void 0 : _patients$.id\n    });\n    const getProgressLevel = progress => {\n      if (progress < 40) return 'low';\n      if (progress < 70) return 'medium';\n      return 'high';\n    };\n\n    // Process patients with their latest sessions\n    const ongoingPatients = patients.map(patient => {\n      var _lastSession$feedback, _lastSession$exercise, _patient$recoveryStat;\n      const patientSessions = sessions.filter(s => s.patientId === patient.id);\n      const lastSession = patientSessions.length > 0 ? patientSessions.sort((a, b) => {\n        var _b$feedback, _a$feedback;\n        return new Date(((_b$feedback = b.feedback) === null || _b$feedback === void 0 ? void 0 : _b$feedback.reviewDate) || '').getTime() - new Date(((_a$feedback = a.feedback) === null || _a$feedback === void 0 ? void 0 : _a$feedback.reviewDate) || '').getTime();\n      })[0] : null;\n      return {\n        id: patient.id,\n        name: `${patient.personalInfo.firstName} ${patient.personalInfo.lastName}`,\n        lastSession: lastSession !== null && lastSession !== void 0 && (_lastSession$feedback = lastSession.feedback) !== null && _lastSession$feedback !== void 0 && _lastSession$feedback.reviewDate ? new Date(lastSession.feedback.reviewDate).toLocaleDateString() : 'N/A',\n        exercise: (lastSession === null || lastSession === void 0 ? void 0 : (_lastSession$exercise = lastSession.exerciseCustomization) === null || _lastSession$exercise === void 0 ? void 0 : _lastSession$exercise.exerciseId) || 'N/A',\n        progress: getProgressLevel(((_patient$recoveryStat = patient.recoveryStatus) === null || _patient$recoveryStat === void 0 ? void 0 : _patient$recoveryStat.overallProgress) || 0)\n      };\n    });\n    return ongoingPatients;\n  } catch (error) {\n    console.error('Failed to fetch ongoing patients:', error);\n    throw error;\n  }\n};\nexport const submitComment = async (sessionId, comment) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/sessions/${sessionId}/comments`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(comment)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to submit comment');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error submitting comment:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","fetchPatient","id","console","log","response","fetch","status","ok","error","statusText","Error","data","json","fetchPatientSessions","patientId","fetchPrescriptions","fetchExercises","fetchSessionMetrics","sessionId","fetchOngoingPatients","_sessions$","_patients$","sessionsResponse","sessions","count","length","firstSession","patientsResponse","patients","firstPatient","getProgressLevel","progress","ongoingPatients","map","patient","_lastSession$feedback","_lastSession$exercise","_patient$recoveryStat","patientSessions","filter","s","lastSession","sort","a","b","_b$feedback","_a$feedback","Date","feedback","reviewDate","getTime","name","personalInfo","firstName","lastName","toLocaleDateString","exercise","exerciseCustomization","exerciseId","recoveryStatus","overallProgress","submitComment","comment","method","headers","body","JSON","stringify"],"sources":["/home/shambhavi/Documents/4-2/tpe/app/tpe-doctor/frontend/src/services/api.ts"],"sourcesContent":["import { Exercise, Session } from '../types';\n\nexport const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000';\n\nexport const fetchPatient = async (id: string) => {\n  console.log('Fetching patient with ID:', id); // Debug log\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/patients/${id}`);\n    console.log('Patient API response status:', response.status); // Debug response\n\n    if (!response.ok) {\n      console.error('Failed to fetch patient:', response.statusText);\n      throw new Error(`Failed to fetch patient: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    console.log('Patient data received:', data); // Debug data\n    return data;\n  } catch (error) {\n    console.error('API call error:', error);\n    throw error;\n  }\n};\n\nexport const fetchPatientSessions = async (patientId: string): Promise<Session[]> => {\n  console.log('Fetching sessions for patient:', patientId); // Debug log\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/sessions/patient/${patientId}`);\n    console.log('Sessions API response status:', response.status); // Debug response\n\n    if (!response.ok) {\n      console.error('Failed to fetch sessions:', response.statusText);\n      throw new Error(`Failed to fetch sessions: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    console.log('Sessions data received:', data); // Debug data\n    return data;\n  } catch (error) {\n    console.error('API call error:', error);\n    throw error;\n  }\n};\n\nexport const fetchPrescriptions = async (patientId: string) => {\n  const response = await fetch(`${API_BASE_URL}/api/prescriptions/patient/${patientId}`);\n  if (!response.ok) throw new Error('Failed to fetch prescriptions');\n  return response.json();\n};\n\nexport const fetchExercises = async (): Promise<Exercise[]> => {\n  const response = await fetch(`${API_BASE_URL}/api/exercises`);\n  if (!response.ok) throw new Error('Failed to fetch exercises');\n  return response.json();\n};\n\nexport const fetchSessionMetrics = async (sessionId: string) => {\n  const response = await fetch(`${API_BASE_URL}/api/sessions/${sessionId}/metrics`);\n  if (!response.ok) throw new Error('Failed to fetch session metrics');\n  return response.json();\n};\n\nexport const fetchOngoingPatients = async (): Promise<any[]> => {\n  try {\n\n    // Fetch sessions\n    console.log(\"Hello I am Fetching sessions from API...\");\n    const sessionsResponse = await fetch(`${API_BASE_URL}/api/allsessions`);\n    if (!sessionsResponse.ok) {\n      throw new Error(`Failed to fetch sessions: ${sessionsResponse.statusText}`);\n    }\n    const sessions = await sessionsResponse.json();\n    console.log('Successfully fetched sessions from API:', {\n      count: sessions.length,\n      firstSession: sessions[0]?.id\n    });\n\n    // Fetch patients first\n    console.log(\"Hello I am Fetching patients from API...\");\n    const patientsResponse = await fetch(`${API_BASE_URL}/api/patients`);\n    if (!patientsResponse.ok) {\n      throw new Error(`Failed to fetch patients: ${patientsResponse.statusText}`);\n    }\n    const patients = await patientsResponse.json();\n    console.log('Successfully fetched patients from API:', {\n      count: patients.length,\n      firstPatient: patients[0]?.id\n    });\n\n    const getProgressLevel = (progress: number): string => {\n      if (progress < 40) return 'low';\n      if (progress < 70) return 'medium';\n      return 'high';\n    };\n\n    // Process patients with their latest sessions\n    const ongoingPatients = patients.map((patient: any) => {\n      const patientSessions = sessions.filter((s: any) => s.patientId === patient.id);\n      const lastSession = patientSessions.length > 0 \n        ? patientSessions.sort((a: any, b: any) => \n            new Date(b.feedback?.reviewDate || '').getTime() - \n            new Date(a.feedback?.reviewDate || '').getTime()\n          )[0]\n        : null;\n\n      return {\n        id: patient.id,\n        name: `${patient.personalInfo.firstName} ${patient.personalInfo.lastName}`,\n        lastSession: lastSession?.feedback?.reviewDate \n          ? new Date(lastSession.feedback.reviewDate).toLocaleDateString()\n          : 'N/A',\n        exercise: lastSession?.exerciseCustomization?.exerciseId || 'N/A',\n        progress: getProgressLevel(patient.recoveryStatus?.overallProgress || 0)\n      };\n    });\n\n    return ongoingPatients;\n  } catch (error) {\n    console.error('Failed to fetch ongoing patients:', error);\n    throw error;\n  }\n};\n\nexport const submitComment = async (sessionId: string, comment: {\n  text: string;\n  type: string;\n  reviewedBy: string;\n}) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/sessions/${sessionId}/comments`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(comment),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to submit comment');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error submitting comment:', error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}