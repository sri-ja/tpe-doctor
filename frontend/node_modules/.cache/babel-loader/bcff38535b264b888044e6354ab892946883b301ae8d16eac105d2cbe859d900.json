{"ast":null,"code":"export const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000';\nexport const fetchPatient = async id => {\n  console.log('Fetching patient with ID:', id); // Debug log\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/patients/${id}`);\n    console.log('Patient API response status:', response.status); // Debug response\n\n    if (!response.ok) {\n      console.error('Failed to fetch patient:', response.statusText);\n      throw new Error(`Failed to fetch patient: ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log('Patient data received:', data); // Debug data\n    return data;\n  } catch (error) {\n    console.error('API call error:', error);\n    throw error;\n  }\n};\nexport const fetchPatientSessions = async patientId => {\n  console.log('Fetching sessions for patient:', patientId); // Debug log\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/sessions/patient/${patientId}`);\n    console.log('Sessions API response status:', response.status); // Debug response\n\n    if (!response.ok) {\n      console.error('Failed to fetch sessions:', response.statusText);\n      throw new Error(`Failed to fetch sessions: ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log('Sessions data received:', data); // Debug data\n    return data;\n  } catch (error) {\n    console.error('API call error:', error);\n    throw error;\n  }\n};\nexport const fetchPrescriptions = async patientId => {\n  const response = await fetch(`${API_BASE_URL}/api/prescriptions/patient/${patientId}`);\n  if (!response.ok) throw new Error('Failed to fetch prescriptions');\n  return response.json();\n};\nexport const fetchExercises = async () => {\n  const response = await fetch(`${API_BASE_URL}/api/exercises`);\n  if (!response.ok) throw new Error('Failed to fetch exercises');\n  return response.json();\n};\nexport const fetchSessionMetrics = async sessionId => {\n  const response = await fetch(`${API_BASE_URL}/api/sessions/${sessionId}/metrics`);\n  if (!response.ok) throw new Error('Failed to fetch session metrics');\n  return response.json();\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","fetchPatient","id","console","log","response","fetch","status","ok","error","statusText","Error","data","json","fetchPatientSessions","patientId","fetchPrescriptions","fetchExercises","fetchSessionMetrics","sessionId"],"sources":["/home/shambhavi/Documents/4-2/tpe/app/tpe-doctor/frontend/src/services/api.ts"],"sourcesContent":["import { Exercise, Session } from '../types';\n\nexport const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000';\n\nexport const fetchPatient = async (id: string) => {\n  console.log('Fetching patient with ID:', id); // Debug log\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/patients/${id}`);\n    console.log('Patient API response status:', response.status); // Debug response\n\n    if (!response.ok) {\n      console.error('Failed to fetch patient:', response.statusText);\n      throw new Error(`Failed to fetch patient: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    console.log('Patient data received:', data); // Debug data\n    return data;\n  } catch (error) {\n    console.error('API call error:', error);\n    throw error;\n  }\n};\n\nexport const fetchPatientSessions = async (patientId: string): Promise<Session[]> => {\n  console.log('Fetching sessions for patient:', patientId); // Debug log\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/sessions/patient/${patientId}`);\n    console.log('Sessions API response status:', response.status); // Debug response\n\n    if (!response.ok) {\n      console.error('Failed to fetch sessions:', response.statusText);\n      throw new Error(`Failed to fetch sessions: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    console.log('Sessions data received:', data); // Debug data\n    return data;\n  } catch (error) {\n    console.error('API call error:', error);\n    throw error;\n  }\n};\n\nexport const fetchPrescriptions = async (patientId: string) => {\n  const response = await fetch(`${API_BASE_URL}/api/prescriptions/patient/${patientId}`);\n  if (!response.ok) throw new Error('Failed to fetch prescriptions');\n  return response.json();\n};\n\nexport const fetchExercises = async (): Promise<Exercise[]> => {\n  const response = await fetch(`${API_BASE_URL}/api/exercises`);\n  if (!response.ok) throw new Error('Failed to fetch exercises');\n  return response.json();\n};\n\nexport const fetchSessionMetrics = async (sessionId: string) => {\n  const response = await fetch(`${API_BASE_URL}/api/sessions/${sessionId}/metrics`);\n  if (!response.ok) throw new Error('Failed to fetch session metrics');\n  return response.json();\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}