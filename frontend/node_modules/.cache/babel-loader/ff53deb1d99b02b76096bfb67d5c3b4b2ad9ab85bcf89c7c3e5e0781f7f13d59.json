{"ast":null,"code":"var _jsxFileName = \"/home/shambhavi/Documents/4-2/tpe/app/tpe-doctor/src/context/ReviewSessionContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from \"react\";\n\n// 1. Define interface for the review session data\n\n// 2. Define interface for the context value\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// 3. Provide a default value matching the type for createContext\nconst defaultContextValue = {\n  pendingReviews: [],\n  pendingCount: 0,\n  completeReview: () => {} // Default function does nothing\n};\nconst ReviewSessionContext = /*#__PURE__*/createContext(defaultContextValue);\nconst mockReviewSessions = [\n// Type the mock data array\n{\n  id: \"PT001\",\n  name: \"John Smith\",\n  sessionDate: \"2024-01-15\",\n  exercise: \"Climbing Temple Stairs\",\n  duration: \"45 min\",\n  performance: 92\n}, {\n  id: \"PT002\",\n  name: \"Sarah Johnson\",\n  sessionDate: \"2024-01-14\",\n  exercise: \"Pattern Puzzle\",\n  duration: \"30 min\",\n  performance: 88\n}, {\n  id: \"PT003\",\n  name: \"Michael Brown\",\n  sessionDate: \"2024-01-13\",\n  exercise: \"Focus Flow\",\n  duration: \"25 min\",\n  performance: 76\n}, {\n  id: \"PT004\",\n  name: \"Emma Davis\",\n  sessionDate: \"2024-01-12\",\n  exercise: \"Quick Reflexes\",\n  duration: \"35 min\",\n  performance: 95\n}, {\n  id: \"PT005\",\n  name: \"James Wilson\",\n  sessionDate: \"2024-01-11\",\n  exercise: \"Rhythm Flow\",\n  duration: \"40 min\",\n  performance: 82\n}, {\n  id: \"PT006\",\n  name: \"Olivia Smith\",\n  sessionDate: \"2024-01-10\",\n  exercise: \"Climbing Temple Stairs\",\n  duration: \"45 min\",\n  performance: 90\n}, {\n  id: \"PT007\",\n  name: \"William Johnson\",\n  sessionDate: \"2024-01-09\",\n  exercise: \"Pattern Puzzle\",\n  duration: \"30 min\",\n  performance: 85\n}, {\n  id: \"PT008\",\n  name: \"Sophia Brown\",\n  sessionDate: \"2024-01-08\",\n  exercise: \"Focus Flow\",\n  duration: \"25 min\",\n  performance: 78\n}, {\n  id: \"PT009\",\n  name: \"Ethan Davis\",\n  sessionDate: \"2024-01-07\",\n  exercise: \"Quick Reflexes\",\n  duration: \"35 min\",\n  performance: 92\n}, {\n  id: \"PT010\",\n  name: \"Ava Wilson\",\n  sessionDate: \"2024-01-06\",\n  exercise: \"Rhythm Flow\",\n  duration: \"40 min\",\n  performance: 80\n}];\n\n// 4. Type the children prop\n\nexport const PatientProvider = ({\n  children\n}) => {\n  _s();\n  // 5. Type useState calls\n  const [pendingReviews, setPendingReviews] = useState(mockReviewSessions);\n  const [pendingCount, setPendingCount] = useState(mockReviewSessions.length);\n\n  // 6. Type patientId parameter (already done in context type definition)\n  const completeReview = patientId => {\n    setPendingReviews(prev => prev.filter(p => p.id !== patientId));\n    // Ensure count doesn't go below zero\n    setPendingCount(prev => Math.max(0, prev - 1));\n  };\n  return /*#__PURE__*/_jsxDEV(ReviewSessionContext.Provider, {\n    value: {\n      pendingReviews,\n      pendingCount,\n      completeReview\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n\n// 7. Type the return value of the hook\n_s(PatientProvider, \"1EDRiaRG3n3U4j8T/WNHd4pdZ9M=\");\n_c = PatientProvider;\nexport const usePatients = () => {\n  _s2();\n  const context = useContext(ReviewSessionContext);\n  if (context === undefined) {\n    // Provide a more helpful error message if used outside the provider\n    throw new Error('usePatients must be used within a PatientProvider');\n  }\n  return context;\n};\n_s2(usePatients, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"PatientProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","defaultContextValue","pendingReviews","pendingCount","completeReview","ReviewSessionContext","mockReviewSessions","id","name","sessionDate","exercise","duration","performance","PatientProvider","children","_s","setPendingReviews","setPendingCount","length","patientId","prev","filter","p","Math","max","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","usePatients","_s2","context","undefined","Error","$RefreshReg$"],"sources":["/home/shambhavi/Documents/4-2/tpe/app/tpe-doctor/src/context/ReviewSessionContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from \"react\";\n\n// 1. Define interface for the review session data\ninterface PatientReviewSession {\n  id: string;\n  name: string;\n  sessionDate: string;\n  exercise: string;\n  duration: string;\n  performance: number;\n}\n\n// 2. Define interface for the context value\ninterface ReviewSessionContextType {\n  pendingReviews: PatientReviewSession[];\n  pendingCount: number;\n  completeReview: (patientId: string) => void; // Typed the parameter\n}\n\n// 3. Provide a default value matching the type for createContext\nconst defaultContextValue: ReviewSessionContextType = {\n  pendingReviews: [],\n  pendingCount: 0,\n  completeReview: () => {}, // Default function does nothing\n};\n\nconst ReviewSessionContext = createContext<ReviewSessionContextType>(defaultContextValue);\n\nconst mockReviewSessions: PatientReviewSession[] = [ // Type the mock data array\n  {\n    id: \"PT001\",\n    name: \"John Smith\",\n    sessionDate: \"2024-01-15\",\n    exercise: \"Climbing Temple Stairs\",\n    duration: \"45 min\",\n    performance: 92,\n  },\n  {\n    id: \"PT002\",\n    name: \"Sarah Johnson\",\n    sessionDate: \"2024-01-14\",\n    exercise: \"Pattern Puzzle\",\n    duration: \"30 min\",\n    performance: 88,\n  },\n  {\n    id: \"PT003\",\n    name: \"Michael Brown\",\n    sessionDate: \"2024-01-13\",\n    exercise: \"Focus Flow\",\n    duration: \"25 min\",\n    performance: 76,\n  },\n  {\n    id: \"PT004\",\n    name: \"Emma Davis\",\n    sessionDate: \"2024-01-12\",\n    exercise: \"Quick Reflexes\",\n    duration: \"35 min\",\n    performance: 95,\n  },\n  {\n    id: \"PT005\",\n    name: \"James Wilson\",\n    sessionDate: \"2024-01-11\",\n    exercise: \"Rhythm Flow\",\n    duration: \"40 min\",\n    performance: 82,\n  },\n  {\n    id: \"PT006\",\n    name: \"Olivia Smith\",\n    sessionDate: \"2024-01-10\",\n    exercise: \"Climbing Temple Stairs\",\n    duration: \"45 min\",\n    performance: 90,\n  },\n  {\n    id: \"PT007\",\n    name: \"William Johnson\",\n    sessionDate: \"2024-01-09\",\n    exercise: \"Pattern Puzzle\",\n    duration: \"30 min\",\n    performance: 85,\n  },\n  {\n    id: \"PT008\",\n    name: \"Sophia Brown\",\n    sessionDate: \"2024-01-08\",\n    exercise: \"Focus Flow\",\n    duration: \"25 min\",\n    performance: 78,\n  },\n  {\n    id: \"PT009\",\n    name: \"Ethan Davis\",\n    sessionDate: \"2024-01-07\",\n    exercise: \"Quick Reflexes\",\n    duration: \"35 min\",\n    performance: 92,\n  },\n  {\n    id: \"PT010\",\n    name: \"Ava Wilson\",\n    sessionDate: \"2024-01-06\",\n    exercise: \"Rhythm Flow\",\n    duration: \"40 min\",\n    performance: 80,\n  },\n];\n\n// 4. Type the children prop\ninterface PatientProviderProps {\n  children: ReactNode;\n}\n\nexport const PatientProvider: React.FC<PatientProviderProps> = ({ children }) => {\n  // 5. Type useState calls\n  const [pendingReviews, setPendingReviews] = useState<PatientReviewSession[]>(mockReviewSessions);\n  const [pendingCount, setPendingCount] = useState<number>(mockReviewSessions.length);\n\n  // 6. Type patientId parameter (already done in context type definition)\n  const completeReview = (patientId: string) => {\n    setPendingReviews((prev) => prev.filter((p) => p.id !== patientId));\n    // Ensure count doesn't go below zero\n    setPendingCount((prev) => Math.max(0, prev - 1));\n  };\n\n  return (\n    <ReviewSessionContext.Provider\n      value={{ pendingReviews, pendingCount, completeReview }}\n    >\n      {children}\n    </ReviewSessionContext.Provider>\n  );\n};\n\n// 7. Type the return value of the hook\nexport const usePatients = (): ReviewSessionContextType => {\n  const context = useContext(ReviewSessionContext);\n  if (context === undefined) {\n    // Provide a more helpful error message if used outside the provider\n    throw new Error('usePatients must be used within a PatientProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}