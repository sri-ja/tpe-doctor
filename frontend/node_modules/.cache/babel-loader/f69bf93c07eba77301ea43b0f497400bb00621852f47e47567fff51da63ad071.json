{"ast":null,"code":"export const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000';\nexport const fetchPatient = async id => {\n  const response = await fetch(`${API_BASE_URL}/api/patients/${id}`);\n  if (!response.ok) throw new Error('Failed to fetch patient');\n  return response.json();\n};\nexport const fetchPatientSessions = async patientId => {\n  const response = await fetch(`${API_BASE_URL}/api/sessions/patient/${patientId}`);\n  if (!response.ok) throw new Error('Failed to fetch sessions');\n  return response.json();\n};\nexport const fetchPrescriptions = async patientId => {\n  const response = await fetch(`${API_BASE_URL}/api/prescriptions/patient/${patientId}`);\n  if (!response.ok) throw new Error('Failed to fetch prescriptions');\n  return response.json();\n};\nexport const fetchExercises = async () => {\n  const response = await fetch(`${API_BASE_URL}/api/exercises`);\n  if (!response.ok) throw new Error('Failed to fetch exercises');\n  return response.json();\n};\nexport const fetchSessionMetrics = async sessionId => {\n  const response = await fetch(`${API_BASE_URL}/api/sessions/${sessionId}/metrics`);\n  if (!response.ok) throw new Error('Failed to fetch session metrics');\n  return response.json();\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","fetchPatient","id","response","fetch","ok","Error","json","fetchPatientSessions","patientId","fetchPrescriptions","fetchExercises","fetchSessionMetrics","sessionId"],"sources":["/home/shambhavi/Documents/4-2/tpe/app/tpe-doctor/src/services/api.ts"],"sourcesContent":["import { Exercise, Session } from '../types';\n\nexport const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000';\n\nexport const fetchPatient = async (id: string) => {\n  const response = await fetch(`${API_BASE_URL}/api/patients/${id}`);\n  if (!response.ok) throw new Error('Failed to fetch patient');\n  return response.json();\n};\n\nexport const fetchPatientSessions = async (patientId: string): Promise<Session[]> => {\n  const response = await fetch(`${API_BASE_URL}/api/sessions/patient/${patientId}`);\n  if (!response.ok) throw new Error('Failed to fetch sessions');\n  return response.json();\n};\n\nexport const fetchPrescriptions = async (patientId: string) => {\n  const response = await fetch(`${API_BASE_URL}/api/prescriptions/patient/${patientId}`);\n  if (!response.ok) throw new Error('Failed to fetch prescriptions');\n  return response.json();\n};\n\nexport const fetchExercises = async (): Promise<Exercise[]> => {\n  const response = await fetch(`${API_BASE_URL}/api/exercises`);\n  if (!response.ok) throw new Error('Failed to fetch exercises');\n  return response.json();\n};\n\nexport const fetchSessionMetrics = async (sessionId: string) => {\n  const response = await fetch(`${API_BASE_URL}/api/sessions/${sessionId}/metrics`);\n  if (!response.ok) throw new Error('Failed to fetch session metrics');\n  return response.json();\n};"],"mappings":"AAEA,OAAO,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,uBAAuB;AAEzF,OAAO,MAAMC,YAAY,GAAG,MAAOC,EAAU,IAAK;EAChD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,iBAAiBK,EAAE,EAAE,CAAC;EAClE,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5D,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMC,oBAAoB,GAAG,MAAOC,SAAiB,IAAyB;EACnF,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,yBAAyBY,SAAS,EAAE,CAAC;EACjF,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAC7D,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMG,kBAAkB,GAAG,MAAOD,SAAiB,IAAK;EAC7D,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,8BAA8BY,SAAS,EAAE,CAAC;EACtF,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;EAClE,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMI,cAAc,GAAG,MAAAA,CAAA,KAAiC;EAC7D,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,gBAAgB,CAAC;EAC7D,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;EAC9D,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMK,mBAAmB,GAAG,MAAOC,SAAiB,IAAK;EAC9D,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,iBAAiBgB,SAAS,UAAU,CAAC;EACjF,IAAI,CAACV,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;EACpE,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}